USE DataWarehouse;

-- Explore All objects in Database
SELECT * FROM INFORMATION_SCHEMA.TABLES;

-- Explore All columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

-- Explore All the Countries our Customers come from
SELECT DISTINCT country FROM gold.dim_customers;

-- Explore All Categories "The Major Divisions"
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products
ORDER BY 1, 2, 3;

-- Find the date of first and last order
SELECT
MIN(order_date) AS first_order_date, 
MAX(order_date) AS last_order_date,
DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) AS order_range_years,
DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) AS order_range_months
FROM gold.fact_sales;

-- Find the youngest and oldest customer
SELECT
MIN(birthdate) as oldest_birthdate,
DATEDIFF(YEAR, MIN(birthdate), GETDATE()) AS oldest_age,
MAX(birthdate) as youngest_birhtdate,
DATEDIFF(YEAR, MAX(birthdate), GETDATE()) AS youngest_age
FROM gold.dim_customers;

-- Find Total sales amount
SELECT SUM(sales_amount) as total_sales_amount from gold.fact_sales;

-- Find how many items are sold
SELECT SUM(quantity) as total_quantity from gold.fact_sales;

-- Find the average selling price
SELECT AVG(price) as avg_selling_price from gold.fact_sales;

-- Find total number of orders
SELECT COUNT(DISTINCT order_number) as total_orders from gold.fact_sales;

-- Find total number of products
SELECT COUNT(DISTINCT product_key) as total_products from gold.dim_products;

-- Find total number of customers
SELECT COUNT(customer_key) as total_customers from gold.dim_customers;


-- Find total number of customers that has placed an order
SELECT COUNT(DISTINCT customer_key) as total_customers from gold.fact_sales;

-- Generate a Report that shows all Key Metrics of Business
SELECT 'Total Sales' as measure_name, SUM(sales_amount) as measure_value from gold.fact_sales
UNION ALL
SELECT 'Total Quanitty' as measure_name, SUM(quantity) from gold.fact_sales
UNION ALL
SELECT 'Average Price' as measure_name, AVG(price) from gold.fact_sales
UNION ALL
SELECT 'Total No. Orders' as measure_name, COUNT(DISTINCT order_number) as total_orders from gold.fact_sales
UNION ALL
SELECT 'Total No. Products' as measure_name, COUNT(DISTINCT product_key) as total_products from gold.dim_products
UNION ALL
SELECT 'Total No. Customers' as measure_name, COUNT(customer_key) as total_customers from gold.dim_customers;



-- Find the total customers by country
SELECT 
country, 
COUNT(customer_key) as total_customers 
FROM gold.dim_customers GROUP BY country
ORDER BY total_customers DESC;

-- Find the total customers by gender
SELECT 
gender, 
COUNT(customer_key) as total_customers 
FROM gold.dim_customers GROUP BY gender
ORDER BY total_customers DESC;

-- Find the total products by category
SELECT 
category,
COUNT(product_key) AS total_products
FROM gold.dim_products GROUP BY category
ORDER BY total_products DESC;


-- What is the average costs in each category
SELECT 
category,
AVG(cost) AS average_cost
FROM gold.dim_products
GROUP BY category
ORDER BY average_cost desc;

-- What is the total revenue generated for each category
SELECT
p.category,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;

-- Find the total revenue generated by each customer
SELECT 
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC;


-- What is the distribution of sold items across countries
SELECT 
c.country,
SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY 
c.country
ORDER BY total_sold_items DESC;


-- Which 5 products generate highest revenue
SELECT TOP 5
p.product_id,
p.product_name,
SUM(f.sales_amount) as revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.product_id,p.product_name
ORDER BY revenue DESC;

-- Alternative
SELECT * FROM
	(SELECT
	p.product_id,
	p.product_name,
	ROW_NUMBER() OVER(ORDER BY SUM(f.sales_amount) DESC) as rank_products,
	SUM(f.sales_amount) as revenue
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON f.product_key = p.product_key
	GROUP BY p.product_id,p.product_name) t
WHERE rank_products <= 5;

-- What are the 5 worst performing products in terms of sales
SELECT TOP 5
p.product_id,
p.product_name,
SUM(f.sales_amount) as revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.product_id,p.product_name
ORDER BY revenue;

-- Find top 10 customers who have generated the highest revenue
SELECT TOP 10
c.customer_id, 
c.first_name, 
c.last_name,
SUM(f.sales_amount) as revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY 
c.customer_id, 
c.first_name, 
c.last_name
ORDER BY revenue DESC;

-- 3 Customers with fewest orders placed
SELECT TOP 3
c.customer_key, 
c.first_name, 
c.last_name,
COUNT(DISTINCT f.order_number) as orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY 
c.customer_key, 
c.first_name, 
c.last_name
ORDER BY orders;
